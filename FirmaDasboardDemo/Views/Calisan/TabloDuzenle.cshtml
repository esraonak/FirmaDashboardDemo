@{
    ViewData["Title"] = "Tablo Düzenle";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}


<div class="form-group">
    <label>Ürün Seç</label>
    <select id="urunSec" class="form-control"></select>
</div>

<div class="mt-3">
    <button class="btn btn-success" onclick="aktifModuAyarla('GozuksunMu')" id="btnGozuksun">🟢 Görebilsin</button>
    <button class="btn btn-danger" onclick="aktifModuAyarla('GirdimiYapabilir')" id="btnGirebilir">✍️ Girebilsin</button>
    <button class="btn btn-secondary" onclick="aktifModuAyarla('Temizle')" id="btnTemizle">🧹 Gizli Kalsın</button>
    <button class="btn btn-warning" onclick="aktifModuAyarla('SatisFiyatMi')" id="btnSatisFiyat">💰 Satış Fiyatı</button>

    <input type="text" id="formulInput" class="form-control my-2" placeholder="=A1+B1 gibi formül yazın">
    <button id="btnFormulModu" onclick="toggleFormulaMode()" class="btn btn-warning mt-2">✏️ Formül Yaz</button>


</div>

<div id="hot" style="margin-top: 20px;"></div>

<button id="btnKaydet" class="btn btn-primary mt-3" onclick="guncelle()">Kaydet</button>

<style>
    .hucre-girebilir {
        background-color: #f8d7da !important;
    }

    .hucre-gozuksun {
        background-color: #d4edda !important;
    }

    .hucre-satisfiyat {
        background-color: #fff3cd !important; /* Açık sarı */
        font-weight: bold;
        color: #856404; /* koyu sarı metin */
    }

    .btn.active {
        box-shadow: inset 0 0 8px #00000099;
        font-weight: bold;
        transform: scale(1.02);
        opacity: 1;

    }

    .htFormulaTarget {
        background-color: #d1f0ff !important; /* Açık turkuaz */
        border: 2px solid #0d6efd !important; /* Bootstrap primary mavisi çerçeve */
        box-shadow: 0 0 6px #0d6efd80 inset;
        font-weight: bold;
        color: #0d6efd;
    }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@13.0.0/dist/handsontable.full.min.css" />
<script src="https://cdn.jsdelivr.net/npm/hyperformula@1.5.0/dist/hyperformula.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/handsontable@13.0.0/dist/handsontable.full.min.js"></script>



<script>
    let hot;
    let seciliTabloId = null;
    let metaDataMap = {};
    let aktifMod = null;
    let formulModuAktif = false;
    let formulHedefHucre = null;

    document.addEventListener("DOMContentLoaded", function () {
            toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": true,
        "positionClass": "toast-top-right",
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "500",
        "timeOut": "2500",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };
        toastr.options = {
        "closeButton": true,
        "positionClass": "toast-top-right",
        "timeOut": "2500"
    };


        fetch("/api/urun/tabloluurun")
            .then(res => res.json())
            .then(urunler => {
                const select = document.getElementById("urunSec");
                urunler.forEach(u => {
                    const opt = new Option(u.ad, u.id);
                    select.appendChild(opt);
                });
                select.addEventListener("change", tabloyuGetir);
                select.dispatchEvent(new Event("change"));
            });

        document.getElementById("formulInput").addEventListener("input", function () {
            if (formulModuAktif && formulHedefHucre) {
                hot.setDataAtCell(formulHedefHucre.row, formulHedefHucre.col, this.value);
            }
        });
    });

        function toggleFormulaMode() {
        formulModuAktif = !formulModuAktif;

        const btn = document.getElementById("btnFormulModu");
        if (!btn) return;

        if (!formulModuAktif) {
            
            if (formulHedefHucre) {
                hot.setCellMeta(formulHedefHucre.row, formulHedefHucre.col, 'className', '');
                formulHedefHucre = null;
            }

            for (let r = 0; r < hot.countRows(); r++) {
                for (let c = 0; c < hot.countCols(); c++) {
                    hot.setCellMeta(r, c, 'readOnly', false);
                }
            }

            btn.classList.remove("active");
            document.getElementById("formulInput").value = "";
            toastr.error("🔕 Formül modu kapatıldı");
            hot.render();
        } else {
           
            btn.classList.add("active");
            toastr.success("✏️ Hedef hücreyi seçin");
        }
    }


         function tabloyuGetir() {
        const urunId = document.getElementById("urunSec").value;
        const kaydetBtn = document.getElementById("btnKaydet");
        const formulBtn = document.getElementById("btnFormulModu");

        fetch(`/Tablo/VeriGetir?urunId=${urunId}`)
            .then(res => res.json())
            .then(data => {
                // ✅ Eğer veri yoksa veya hücre listesi boşsa
                if (!data || !Array.isArray(data.hucreler) || data.hucreler.length === 0) {
                    toastr.warning("⚠️ Bu ürün için oluşturulmuş bir tablo bulunamadı. Lütfen önce tablo oluşturun.");

                    // 🔒 Butonları pasifleştir
                    kaydetBtn.disabled = true;
                    formulBtn.disabled = true;

                    // 🧹 Önceki tablo varsa sil
                    if (hot) {
                        hot.destroy();
                        hot = null;
                    }

                    document.getElementById("formulInput").value = "";
                    return;
                }

                // ✅ Butonları aktif hale getir
                kaydetBtn.disabled = false;
                formulBtn.disabled = false;

                // Tabloyu kur
                seciliTabloId = data.tabloId;
                const rows = [];
                metaDataMap = {};

                data.hucreler.forEach(h => {
                    const row = parseInt(h.hucreAdi.slice(1)) - 1;
                    const col = h.hucreAdi.charCodeAt(0) - 65;
                    rows[row] = rows[row] || [];
                    rows[row][col] = h.formul;

                    metaDataMap[h.hucreAdi] = {
                        GozuksunMu: h.gozuksunMu,
                        GirdimiYapabilir: h.girdimiYapabilir,
                        SatisFiyatMi: h.satisFiyatMi
                    };
                });

                const container = document.getElementById("hot");
                if (hot) hot.destroy();

                hot = new Handsontable(container, {
                    data: rows,
                    rowHeaders: true,
                    colHeaders: true,
                    formulas: { engine: HyperFormula },
                    licenseKey: 'non-commercial-and-evaluation',
                    contextMenu: {
                        items: {
                            "gozuksun": {
                                name: "🟢 Bayi Görebilsin",
                                callback() {
                                    markSingleCell("GozuksunMu");
                                }
                            },
                            "girebilir": {
                                name: "✍️ Bayi Değer Girebilsin",
                                callback() {
                                    markSingleCell("GirdimiYapabilir");
                                }
                            },
                            "satisfiyat": {
                              name: "💰 Satış Fiyat Hücresi",
                              callback() {
                               markSingleCell("SatisFiyatMi");
                                }
                            },
                            "temizle": {
                                name: "🧹 Gizli Kalsın",
                                callback() {
                                    markSingleCell("Temizle");
                                }
                            },
                            "---------": Handsontable.plugins.ContextMenu.SEPARATOR,
                            ...Handsontable.plugins.ContextMenu.DEFAULT_ITEMS
                        }
                    },
                    afterSelectionEnd(row, col) {
                        if (!formulModuAktif) return;
                        if (!formulHedefHucre) {
                            formulHedefHucre = { row, col };
                            const mevcutFormul = hot.getDataAtCell(row, col) || "";
                            document.getElementById("formulInput").value = mevcutFormul;
                            hot.setCellMeta(row, col, 'className', 'htFormulaTarget');
                            hot.setCellMeta(row, col, 'readOnly', false);
                            hot.render();
                        }
                    },
                    afterOnCellMouseDown(event, coords) {
                        if (!formulModuAktif || !formulHedefHucre) return;

                        const ref = String.fromCharCode(65 + coords.col) + (coords.row + 1);
                        const input = document.getElementById("formulInput");
                        let mevcut = input.value.trim();

                        if (mevcut === "=") {
                            mevcut += ref;
                        } else if (!mevcut.includes(ref)) {
                            const son = mevcut.slice(-1);
                            const operatorMu = ["+", "-", "*", "/"].includes(son);
                            mevcut += (operatorMu ? "" : "+") + ref;
                        }

                        input.value = mevcut;
                        hot.setDataAtCell(formulHedefHucre.row, formulHedefHucre.col, mevcut);
                    },
                    cells(row, col) {
                        const cellId = String.fromCharCode(65 + col) + (row + 1);
                        const meta = metaDataMap[cellId] || {};

                        if (formulModuAktif && formulHedefHucre &&
                            formulHedefHucre.row === row && formulHedefHucre.col === col) {
                            return { className: 'htFormulaTarget' };
                        }

                        if (meta.GirdimiYapabilir) {
                            return { className: 'hucre-girebilir' };
                        }
                        if (meta.GozuksunMu) {
                            return { className: 'hucre-gozuksun' };
                        }
                         if (meta.SatisFiyatMi) {
                            return { className: 'hucre-satisfiyat' };
                        }
                        return {};
                    }
                });
            })
            .catch(err => {
                console.error("Veri getirilemedi:", err);
                toastr.error("❌ Sunucudan veri alınırken hata oluştu.");

                // ❌ Hata durumunda butonları yine pasif yap
                document.getElementById("btnKaydet").disabled = true;
                document.getElementById("btnFormulModu").disabled = true;
            });
    }



    function markSingleCell(mode) {
        const coords = hot.getSelectedLast();
        if (!coords || coords.length < 2) return;
        const row = coords[0];
        const col = coords[1];
        const cell = String.fromCharCode(65 + col) + (row + 1);

        if (mode === "Temizle") {
            delete metaDataMap[cell];
            hot.setCellMeta(row, col, 'className', '');
        } else {
            metaDataMap[cell] = metaDataMap[cell] || {};
            metaDataMap[cell].GozuksunMu = (mode === "GozuksunMu");
            metaDataMap[cell].GirdimiYapabilir = (mode === "GirdimiYapabilir");
            metaDataMap[cell].SatisFiyatMi = (mode === "SatisFiyatMi");
        }

        hot.render();
    }

    function toggleMarkingMode(mode) {
        if (aktifMod === mode) {
            aktifMod = null;
            toggleButtons();
            return;
        }

        aktifMod = mode;
        toggleButtons();

            // 🎯 Toastr uyarısı
    if (mode === "GozuksunMu") {
        toastr.info("🟢 Görebilsin modu aktif. Hücre seçin.");
    } else if (mode === "GirdimiYapabilir") {
        toastr.info("✍️ Girebilir modu aktif. Hücre seçin.");
    } else if (mode === "SatisFiyatMi") {
        toastr.info("💰 Satış fiyat hücresi modu aktif. Hücre seçin.");
    } else {
        toastr.info("🧹 Gizle modu aktif. Hücre seçin.");
    }


        hot.addHookOnce('afterSelectionEnd', function (rowStart, colStart, rowEnd, colEnd) {
            const minRow = Math.min(rowStart, rowEnd);
            const maxRow = Math.max(rowStart, rowEnd);
            const minCol = Math.min(colStart, colEnd);
            const maxCol = Math.max(colStart, colEnd);

            for (let r = minRow; r <= maxRow; r++) {
                for (let c = minCol; c <= maxCol; c++) {
                    const cellId = String.fromCharCode(65 + c) + (r + 1);
                    if (mode === "Temizle") {
                        delete metaDataMap[cellId];
                    } else {
                        metaDataMap[cellId] = metaDataMap[cellId] || {};
                        metaDataMap[cellId].GozuksunMu = (mode === "GozuksunMu");
                        metaDataMap[cellId].GirdimiYapabilir = (mode === "GirdimiYapabilir");
                         metaDataMap[cellId].SatisFiyatMi = (mode === "SatisFiyatMi");
                    }
                }
            }

            aktifMod = null;
            toggleButtons();
            hot.render();
        });
    }

    function aktifModuAyarla(mode) {
        aktifMod = mode;
        document.getElementById("btnGozuksun").classList.toggle("active", mode === "GozuksunMu");
        document.getElementById("btnGirebilir").classList.toggle("active", mode === "GirdimiYapabilir");
        document.getElementById("btnTemizle").classList.toggle("active", mode === "Temizle");
        document.getElementById("btnSatisFiyat").classList.toggle("active", mode === "SatisFiyatMi");

           if (mode === "GozuksunMu") {
        toastr.info("🟢 Görebilsin modu aktif. Hücre seçin.");
    } else if (mode === "GirdimiYapabilir") {
        toastr.info("✍️ Girebilir modu aktif. Hücre seçin.");
    } else if (mode === "SatisFiyatMi") {
        toastr.info("💰 Satış fiyat hücresi modu aktif. Hücre seçin.");
    } else {
        toastr.info("🧹 Gizle modu aktif. Hücre seçin.");
    }


        hot.addHookOnce("afterSelectionEnd", (rowStart, colStart, rowEnd, colEnd) => {
            const minRow = Math.min(rowStart, rowEnd);
            const maxRow = Math.max(rowStart, rowEnd);
            const minCol = Math.min(colStart, colEnd);
            const maxCol = Math.max(colStart, colEnd);

            for (let r = minRow; r <= maxRow; r++) {
                for (let c = minCol; c <= maxCol; c++) {
                    const cellId = String.fromCharCode(65 + c) + (r + 1);
                    if (mode === "Temizle") {
                        delete metaDataMap[cellId];
                        hot.setCellMeta(r, c, 'className', '');
                    } else {
                        metaDataMap[cellId] = metaDataMap[cellId] || {};
                        metaDataMap[cellId].GozuksunMu = (mode === "GozuksunMu");
                        metaDataMap[cellId].GirdimiYapabilir = (mode === "GirdimiYapabilir");
                        metaDataMap[cellId].SatisFiyatMi = (mode === "SatisFiyatMi");
                    }
                }
            }

            hot.render();
        });
    }

        function guncelle() {
        if (!seciliTabloId) {
            toastr.error("⚠️ Tablo yüklenemedi.");
            return;
        }

        Swal.fire({
            title: 'Emin misiniz?',
            text: 'Bayinin görmesini ve giriş yapmasını istediğiniz hücrelerin yukarıda tanımlandığından emin misiniz?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Evet, Güncelle',
            cancelButtonText: 'İptal',
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#dc3545'
        }).then((result) => {
            if (!result.isConfirmed) return;

            const formulluVeri = hot.getSourceData();
            const hucreler = [];

            formulluVeri.forEach((row, i) => {
                row.forEach((value, j) => {
                    const hucreAdi = String.fromCharCode(65 + j) + (i + 1);
                    const meta = metaDataMap[hucreAdi] || {};
                    hucreler.push({
                        HucreAdi: hucreAdi,
                        Formul: value,
                        IsFormul: typeof value === 'string' && value.trim().startsWith("="),
                        GozuksunMu: meta.GirdimiYapabilir ? true : (meta.GozuksunMu ?? false),
                        GirdimiYapabilir: meta.GirdimiYapabilir === true,
                        SatisFiyatMi: meta.SatisFiyatMi === true
                    });
                });
            });

            fetch('/Tablo/Guncelle', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    TabloId: seciliTabloId,
                    Hucreler: hucreler
                })
            })
                .then(res => res.json())
                .then(res => {
                    if (res.status === "ok") {
                        Swal.fire("Güncellendi", "Tablo başarıyla güncellendi.", "success");
                    } else {
                        Swal.fire("Hata", "Güncelleme sırasında bir hata oluştu.", "error");
                    }
                })
                .catch(() => {
                    Swal.fire("Sunucu Hatası", "İşlem sırasında sunucu hatası oluştu.", "error");
                });
        });
    }

</script>

