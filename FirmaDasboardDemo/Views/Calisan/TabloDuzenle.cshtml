@{
    ViewData["Title"] = "Tablo Düzenle";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>Tablo Düzenle</h3>

<div class="form-group">
    <label>Ürün Seç</label>
    <select id="urunSec" class="form-control"></select>
</div>

<div class="mt-3">
    <button class="btn btn-success" onclick="aktifModuAyarla('GozuksunMu')" id="btnGozuksun">🟢 Görebilsin</button>
    <button class="btn btn-danger" onclick="aktifModuAyarla('GirdimiYapabilir')" id="btnGirebilir">✍️ Girebilsin</button>
    <button class="btn btn-secondary" onclick="aktifModuAyarla('Temizle')" id="btnTemizle">🧹 Gizli Kalsın</button>
</div>

<div id="hot" style="margin-top: 20px;"></div>

<button class="btn btn-primary mt-3" onclick="guncelle()">Kaydet</button>

<style>
    .hucre-girebilir {
        background-color: #f8d7da !important;
    }

    .hucre-gozuksun {
        background-color: #d4edda !important;
    }

    .btn.active {
        box-shadow: inset 0 0 8px #00000099;
        font-weight: bold;
        transform: scale(1.02);
        opacity: 1;
    }
</style>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@13.0.0/dist/handsontable.full.min.css" />
<script src="https://cdn.jsdelivr.net/npm/hyperformula@1.5.0/dist/hyperformula.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/handsontable@13.0.0/dist/handsontable.full.min.js"></script>

<script>
    let hot;
    let seciliTabloId = null;
    let metaDataMap = {};
    let aktifMod = null;

    document.addEventListener("DOMContentLoaded", function () {
        fetch("/api/urun/tabloluurun")
            .then(res => res.json())
            .then(urunler => {
                const select = document.getElementById("urunSec");
                select.innerHTML = "";
                urunler.forEach(u => {
                    const opt = document.createElement("option");
                    opt.value = u.id;
                    opt.textContent = u.ad;
                    select.appendChild(opt);
                });

                select.addEventListener("change", tabloyuGetir);
                select.dispatchEvent(new Event("change"));
            });
    });

    function tabloyuGetir() {
        const urunId = document.getElementById("urunSec").value;
        fetch(`/Tablo/VeriGetir?urunId=${urunId}`)
            .then(res => res.json())
            .then(data => {
                seciliTabloId = data.tabloId;
                const rows = [];
                metaDataMap = {};

                data.hucreler.forEach(h => {
                    const row = parseInt(h.hucreAdi.slice(1)) - 1;
                    const col = h.hucreAdi.charCodeAt(0) - 65;
                    rows[row] = rows[row] || [];
                    rows[row][col] = h.formul;

                    metaDataMap[h.hucreAdi] = {
                        GozuksunMu: h.gozuksunMu,
                        GirdimiYapabilir: h.girdimiYapabilir
                    };
                });

                const container = document.getElementById("hot");
                if (hot) hot.destroy();

                hot = new Handsontable(container, {
                    data: rows,
                    rowHeaders: true,
                    colHeaders: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],
                    formulas: { engine: HyperFormula },
                    contextMenu: {
                        items: {
                            "gozuksun": {
                                name: "🟢 Bayi Görebilsin",
                                callback() {
                                    const coords = hot.getSelectedLast();
                                    const cell = String.fromCharCode(65 + coords[1]) + (coords[0] + 1);
                                    metaDataMap[cell] = metaDataMap[cell] || {};
                                    metaDataMap[cell].GozuksunMu = true;
                                    metaDataMap[cell].GirdimiYapabilir = false;
                                    hot.render();
                                }
                            },
                            "girebilir": {
                                name: "✍️ Bayi Değer Girebilsin",
                                callback() {
                                    const coords = hot.getSelectedLast();
                                    const cell = String.fromCharCode(65 + coords[1]) + (coords[0] + 1);
                                    metaDataMap[cell] = metaDataMap[cell] || {};
                                    metaDataMap[cell].GirdimiYapabilir = true;
                                    metaDataMap[cell].GozuksunMu = false;
                                    hot.render();
                                }
                            },
                            "temizle": {
                                name: "🧹 Gizli Kalsın (Temizle)",
                                callback() {
                                    const coords = hot.getSelectedLast();
                                    const cell = String.fromCharCode(65 + coords[1]) + (coords[0] + 1);
                                    delete metaDataMap[cell];
                                    hot.render();
                                }
                            },
                            "---------": Handsontable.plugins.ContextMenu.SEPARATOR,
                            ...Handsontable.plugins.ContextMenu.DEFAULT_ITEMS
                        }
                    },
                    cells: function (row, col) {
                        const cell = String.fromCharCode(65 + col) + (row + 1);
                        const meta = metaDataMap[cell];
                        const cellMeta = {};

                        if (meta?.GirdimiYapabilir) {
                            cellMeta.className = 'hucre-girebilir';
                        } else if (meta?.GozuksunMu) {
                            cellMeta.className = 'hucre-gozuksun';
                        }

                        return cellMeta;
                    },
                    licenseKey: 'non-commercial-and-evaluation'
                });
            });
    }

    function aktifModuAyarla(mode) {
        aktifMod = mode;

        document.getElementById("btnGozuksun").classList.toggle("active", mode === "GozuksunMu");
        document.getElementById("btnGirebilir").classList.toggle("active", mode === "GirdimiYapabilir");
        document.getElementById("btnTemizle").classList.toggle("active", mode === "Temizle");

        alert(`"${mode}" modu aktif. Hücre seçin.`);

            hot.addHookOnce("afterSelectionEnd", (rowStart, colStart, rowEnd, colEnd) => {
        const minRow = Math.min(rowStart, rowEnd);
        const maxRow = Math.max(rowStart, rowEnd);
        const minCol = Math.min(colStart, colEnd);
        const maxCol = Math.max(colStart, colEnd);

        for (let r = minRow; r <= maxRow; r++) {
            for (let c = minCol; c <= maxCol; c++) {
                const cellId = String.fromCharCode(65 + c) + (r + 1);
                if (mode === "Temizle") {
                    delete metaDataMap[cellId];
                    hot.setCellMeta(r, c, 'className', ''); // 👈 BU SATIRI EKLE
                } else {
                    metaDataMap[cellId] = metaDataMap[cellId] || {};
                    if (mode === "GozuksunMu") {
                        metaDataMap[cellId].GozuksunMu = true;
                        metaDataMap[cellId].GirdimiYapabilir = false;
                    } else if (mode === "GirdimiYapabilir") {
                        metaDataMap[cellId].GirdimiYapabilir = true;
                        metaDataMap[cellId].GozuksunMu = false;
                    }
                }
            }
        }

        hot.render();
    });

    }

    function guncelle() {
        if (!seciliTabloId) return alert("Tablo yüklenemedi.");

        const formulluVeri = hot.getSourceData();
        const hucreler = [];

        formulluVeri.forEach((row, i) => {
            row.forEach((value, j) => {
                const hucreAdi = String.fromCharCode(65 + j) + (i + 1);
                const meta = metaDataMap[hucreAdi] || {};
                hucreler.push({
                    HucreAdi: hucreAdi,
                    Formul: value,
                    IsFormul: typeof value === 'string' && value.trim().startsWith("="),
                    GozuksunMu: meta.GirdimiYapabilir ? true : (meta.GozuksunMu ?? false),
                    GirdimiYapabilir: meta.GirdimiYapabilir === true
                });
            });
        });

        fetch('/Tablo/Guncelle', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                TabloId: seciliTabloId,
                Hucreler: hucreler
            })
        })
        .then(res => res.json())
        .then(res => {
            if (res.status === "ok") alert("✅ Güncellendi!");
            else alert("❌ Hata oluştu!");
        });
    }
</script>
