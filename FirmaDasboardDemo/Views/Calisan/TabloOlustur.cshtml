@{
    ViewData["Title"] = "Tablo Oluştur";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Ürün İşlem Butonları -->
<div class="mb-2">
    <button class="btn btn-success" onclick="$('#urunEkleModal').modal('show')">+ Ürün Ekle</button>
    <button class="btn btn-danger" onclick="urunSil()">– Ürün Sil</button>
</div>

<!-- Ürün Seç Dropdown -->
<div class="form-group">
    <label>Ürün Seç</label>
    <select id="urunSec" class="form-control"></select>
</div>
<!-- Firma Değişkenleri Paneli -->
<div class="card mt-3">
    <div class="card-header">
        <strong>Firma Değişkenleri</strong>
    </div>
    <div class="card-body">
        <div id="degiskenCheckboxList" class="row"></div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="urunEkleModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Yeni Ürün Ekle</h5></div>
            <div class="modal-body">
                <input type="text" id="yeniUrunAdi" class="form-control mb-2" placeholder="Ürün adı girin" />
                <textarea id="yeniUrunAciklama" class="form-control" placeholder="Açıklama (isteğe bağlı)"></textarea>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button class="btn btn-primary" onclick="urunEkle()">Ekle</button>
            </div>

        </div>
    </div>
</div>

<h3>Hesaplama Tablosu</h3>
<!-- Butonlar: Tablo üstü -->
<div class="d-flex flex-wrap gap-2 mb-2">
    <button id="btnGozuksun" class="btn btn-success" onclick="toggleMarkingMode('GozuksunMu')">🟢 Bayi Görebilsin</button>
    <button id="btnGirebilir" class="btn btn-danger" onclick="toggleMarkingMode('GirdimiYapabilir')">✍️ Bayi Değer Girebilsin</button>
    <button id="btnTemizle" class="btn btn-secondary" onclick="toggleMarkingMode('Temizle')">🧹 Gizli Kalsın</button>
</div>
<div id="hot" style="margin-top: 20px; width: 100%;"></div>
<!-- Formül Girişi ve Butonu -->
<div class="mt-3">
    
    <input type="text" id="formulInput" class="form-control my-2" placeholder="Formül girin: =A1+B1" />
    <button id="btnFormulModu" class="btn btn-warning mt-2" onclick="toggleFormulaMode()">📐 Formül Yaz</button>


</div>


<button id="btnKaydet" class="btn btn-primary mt-3" onclick="kaydet()">Kaydet</button>
<style>
    .hucre-girebilir {
        background-color: #f8d7da !important; /* Açık kırmızı */
    }

    .hucre-gozuksun {
        background-color: #d4edda !important; /* Açık yeşil */
    }

    .btn.active {
        box-shadow: inset 0 0 8px #000000aa, 0 0 5px #28a74588;
        border: 2px solid #00000055;
        opacity: 1;
        font-weight: bold;
        transform: scale(1.02);
        transition: all 0.1s ease-in-out;
    }

    .htFormulaTarget {
        background-color: #d1f0ff !important; /* Açık turkuaz */
        border: 2px solid #0d6efd !important; /* Bootstrap primary mavisi çerçeve */
        box-shadow: 0 0 6px #0d6efd80 inset;
        font-weight: bold;
        color: #0d6efd;
    }
</style>


<!-- 1. jQuery (Toastr'dan önce gelmeli) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@13.0.0/dist/handsontable.full.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable@13.0.0/dist/handsontable.full.min.css" />
<script src="https://cdn.jsdelivr.net/npm/hyperformula@1.5.0/dist/hyperformula.full.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/handsontable@13.0.0/dist/handsontable.full.min.js"></script>
<!-- Toastr CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Toastr JS (jQuery'den sonra gelmeli) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


<script>
    const seoUrl = '@ViewBag.SirketSeoUrl';
    let hot;
    let metaDataMap = {};
    let aktifMod = null;
    let formulModuAktif = false;
    let formulHedefHucre = null;

            function butonlariAktifEt() {
        const ids = ["btnKaydet", "btnFormulModu"];
        ids.forEach(id => {
            const btn = document.getElementById(id);
            if (btn) btn.disabled = false;
        });
    }

    function butonlariPasifEt() {
        const ids = ["btnKaydet", "btnFormulModu"];
        ids.forEach(id => {
            const btn = document.getElementById(id);
            if (btn) btn.disabled = true;
        });
    }


    // Formül yazma modunu aç/kapat
      function toggleFormulaMode() {
        formulModuAktif = !formulModuAktif;

        if (!formulModuAktif) {
            // 🔴 Formül modu kapatılıyor

            if (formulHedefHucre) {
                hot.setCellMeta(formulHedefHucre.row, formulHedefHucre.col, 'className', '');
                formulHedefHucre = null;
            }

            // Tüm hücreleri tekrar düzenlenebilir yap
            const rows = hot.countRows();
            const cols = hot.countCols();
            for (let r = 0; r < rows; r++) {
                for (let c = 0; c < cols; c++) {
                    hot.setCellMeta(r, c, 'readOnly', false);
                }
            }

            // Formül inputunu temizle
            const input = document.getElementById("formulInput");
            if (input) input.value = "";

            // Buton görünümünü sıfırla
            document.getElementById("btnFormulModu").classList.remove("active");

            hot.render();

            // 🔔 Toastr uyarısı
            toastr.error("🔕 Formül modu kapatıldı");
           
        } else {
            // 🟡 Formül modu açıldı
            document.getElementById("btnFormulModu").classList.add("active");

            // 🔔 Toastr uyarısı
            toastr.success("✏️ Hedef hücreyi seçin");

           
        }
    }



    // Hedef hücre seçildiğinde inputa formülü yaz
    function afterSelectionEnd(row, col) {
        if (formulModuAktif) {
            formulHedefHucre = { row, col };
            const currentValue = hot.getDataAtCell(row, col);
            document.getElementById("formulInput").value = currentValue || "";

            const rows = hot.countRows();
            const cols = hot.countCols();
            for (let r = 0; r < rows; r++) {
                for (let c = 0; c < cols; c++) {
                    hot.setCellMeta(r, c, 'readOnly', !(r === row && c === col));
                }
            }

            hot.setCellMeta(row, col, 'className', 'htFormulaTarget');
            hot.render();
        }
    }

    // Hücrelere tıklandıkça formüle ekle
    function afterOnCellMouseDown(event, coords) {
        if (!formulModuAktif || !formulHedefHucre) return;

        const ref = String.fromCharCode(65 + coords.col) + (coords.row + 1);
        const hedef = formulHedefHucre;
        let currentFormula = hot.getDataAtCell(hedef.row, hedef.col) || "";

        if (!currentFormula.startsWith("=")) {
            currentFormula = "=" + ref;
        } else {
            if (!currentFormula.includes(ref)) {
                if (!currentFormula.endsWith("+")) currentFormula += "+";
                currentFormula += ref;
            }
        }

        hot.setDataAtCell(hedef.row, hedef.col, currentFormula);
        document.getElementById("formulInput").value = currentFormula;
    }

    // Formül inputu değiştiğinde tabloya yaz
    document.getElementById("formulInput").addEventListener("input", function () {
        if (formulModuAktif && formulHedefHucre) {
            const yeni = this.value;
            hot.setDataAtCell(formulHedefHucre.row, formulHedefHucre.col, yeni);
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
            toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": true,
        "positionClass": "toast-top-right",
        "preventDuplicates": false,
        "showDuration": "300",
        "hideDuration": "500",
        "timeOut": "2500",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };
        toastr.options = {
        "closeButton": false,
        "progressBar": true,
        "positionClass": "toast-top-right",
        "timeOut": "2500"
    };
        initHandsontable();
        degiskenleriGetir();

       fetch(`/${seoUrl}/api/urun/liste`)
    .then(res => res.json())
    .then(urunler => {
        const select = document.getElementById("urunSec");
        select.innerHTML = "";

        if (urunler.length === 0) {
            toastr.warning("❗Tablosu olmayan ürün bulunmamaktadır. Lütfen önce ürün ekleyin.");
            butonlariPasifEt();
            return;
        }

        urunler.forEach(u => {
            const opt = new Option(u.ad, u.id);
            select.appendChild(opt);
        });

        butonlariAktifEt();

        select.addEventListener("change", () => {
            if (hot) hot.destroy();
            metaDataMap = {};
            initHandsontable();
        });

        select.dispatchEvent(new Event("change"));
    });


        document.getElementById("formulInput").addEventListener("input", function () {
            if (formulModuAktif && formulHedefHucre) {
                hot.setDataAtCell(formulHedefHucre.row, formulHedefHucre.col, this.value);
            }
        });
    });

    function initHandsontable() {
        hot = new Handsontable(document.getElementById('hot'), {
            data: [['', ''], ['', '']],
            rowHeaders: true,
            colHeaders: true,
            minSpareCols: 1,
            minSpareRows: 1,
            allowInsertColumn: true,
            allowInsertRow: true,
            formulas: { engine: HyperFormula },
            contextMenu: {
                items: {
                    "gozuksun": {
                        name: "🟢 Bayi Görebilsin",
                        callback() {
                            markSingleCell("GozuksunMu");
                        }
                    },
                    "girebilir": {
                        name: "✍️ Bayi Değer Girebilsin",
                        callback() {
                            markSingleCell("GirdimiYapabilir");
                        }
                    },
                    "---------": Handsontable.plugins.ContextMenu.SEPARATOR,
                    ...Handsontable.plugins.ContextMenu.DEFAULT_ITEMS
                }
            },
            afterSelectionEnd(row, col) {
                if (!formulModuAktif) return;

                if (!formulHedefHucre) {
                    formulHedefHucre = { row, col };
                    const mevcutFormul = hot.getDataAtCell(row, col) || "";
                    document.getElementById("formulInput").value = mevcutFormul;

                    hot.setCellMeta(row, col, 'className', 'htFormulaTarget');
                    hot.setCellMeta(row, col, 'readOnly', false);
                    hot.render();
                }
            },
                afterOnCellMouseDown(event, coords) {
        if (!formulModuAktif || !formulHedefHucre) return;

        const ref = String.fromCharCode(65 + coords.col) + (coords.row + 1);
        const input = document.getElementById("formulInput");
        let mevcut = input.value.trim();

        // Sadece '=' varsa ilk kez hücre ekleniyor
        if (mevcut === "=") {
            mevcut += ref;
        }
        // Formül varsa ve + ile bitmiyorsa, operatör otomatik ekleme
        else if (!mevcut.includes(ref)) {
            // Son karakter +, -, *, / değilse boşluk bırak
            const sonKarakter = mevcut.slice(-1);
            const operatorMu = ["+", "-", "*", "/"].includes(sonKarakter);

            mevcut += (operatorMu ? "" : "+") + ref;
        }

        input.value = mevcut;
        hot.setDataAtCell(formulHedefHucre.row, formulHedefHucre.col, mevcut);
    }
    ,
               cells(row, col) {
        const cellId = String.fromCharCode(65 + col) + (row + 1);
        const meta = metaDataMap[cellId] || {};

        // 🎯 Formül hedef hücre
        if (formulModuAktif && formulHedefHucre && formulHedefHucre.row === row && formulHedefHucre.col === col) {
            return { className: 'htFormulaTarget' };
        }

        // ✍️ Bayi değer girebilir
        if (meta.GirdimiYapabilir) {
            return { className: 'hucre-girebilir' };
        }

        // 🟢 Bayi görebilir
        if (meta.GozuksunMu) {
            return { className: 'hucre-gozuksun' };
        }

        // 🧹 Hiçbir işaretleme yapılmamışsa: Gizli
        return { className: 'hucre-gizli' };
    }
    ,
            licenseKey: 'non-commercial-and-evaluation'
        });
    }

    function markSingleCell(mode) {
        const coords = hot.getSelectedLast();
            if (!coords || coords.length < 2) return toastr.error("Hücre seçilmedi.");
 
        const row = coords[0];
        const col = coords[1];
        const cell = String.fromCharCode(65 + col) + (row + 1);

        metaDataMap[cell] = metaDataMap[cell] || {};
        metaDataMap[cell].GozuksunMu = (mode === "GozuksunMu");
        metaDataMap[cell].GirdimiYapabilir = (mode === "GirdimiYapabilir");
        hot.render();
    }

    function toggleMarkingMode(mode) {
        if (aktifMod === mode) {
            aktifMod = null;
            toggleButtons();
            return;
        }

        aktifMod = mode;
        toggleButtons();

        // ✅ Toastr ile kullanıcıya bilgi ver
        const mesaj = mode === "GozuksunMu"
            ? "🟢 Görebilsin modu aktif. Alan seçin."
            : mode === "GirdimiYapabilir"
            ? "✍️ Girebilsin modu aktif. Alan seçin."
            : "🧹 Gizle modu aktif. Alan seçin.";

        toastr.info(mesaj);

        hot.addHookOnce('afterSelectionEnd', function (rowStart, colStart, rowEnd, colEnd) {
            const minRow = Math.min(rowStart, rowEnd);
            const maxRow = Math.max(rowStart, rowEnd);
            const minCol = Math.min(colStart, colEnd);
            const maxCol = Math.max(colStart, colEnd);

            for (let r = minRow; r <= maxRow; r++) {
                for (let c = minCol; c <= maxCol; c++) {
                    const cellId = String.fromCharCode(65 + c) + (r + 1);

                    if (mode === "Temizle") {
                        delete metaDataMap[cellId];
                    } else {
                        metaDataMap[cellId] = metaDataMap[cellId] || {};
                        metaDataMap[cellId].GozuksunMu = (mode === "GozuksunMu");
                        metaDataMap[cellId].GirdimiYapabilir = (mode === "GirdimiYapabilir");
                    }
                }
            }

            aktifMod = null;
            toggleButtons();
            hot.render();
        });
    }


    function toggleButtons() {
        document.getElementById("btnGozuksun").classList.toggle("active", aktifMod === "GozuksunMu");
        document.getElementById("btnGirebilir").classList.toggle("active", aktifMod === "GirdimiYapabilir");
        document.getElementById("btnTemizle").classList.toggle("active", aktifMod === "Temizle");
    }

       function kaydet() {
        const urunSelect = document.getElementById("urunSec");
        const urunId = parseInt(urunSelect.value);
        const urunAd = urunSelect.options[urunSelect.selectedIndex].text;
           if (!urunId || isNaN(urunId)) return toastr.success("Lütfen bir ürün seçin.");
    

        // 🧠 SweetAlert ile kullanıcı onayı al
        Swal.fire({
            title: 'Emin misiniz?',
            text: 'Bayinin görmesini ve giriş yapmasını istediğiniz hücrelerin yukarıda tanımlandığından emin misiniz?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Evet, Kaydet',
            cancelButtonText: 'İptal',
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#dc3545'
        }).then((result) => {
            if (!result.isConfirmed) return; // Kullanıcı iptal etti

            const formulluVeri = hot.getSourceData();
            const hucreler = [];

            formulluVeri.forEach((row, i) => {
                row.forEach((val, j) => {
                    const hAd = String.fromCharCode(65 + j) + (i + 1);
                    const meta = metaDataMap[hAd] || {};
                    hucreler.push({
                        HucreAdi: hAd,
                        Formul: val,
                        IsFormul: typeof val === 'string' && val.trim().startsWith("="),
                        GozuksunMu: meta.GozuksunMu === true,
                        GirdimiYapabilir: meta.GirdimiYapabilir === true
                    });
                });
            });

            fetch(`/${seoUrl}/api/tablo/kaydet`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    UrunId: urunId,
                    TabloAdi: `${urunAd} TABLOSU`,
                    Aciklama: `${urunAd} üzerinden oluşturuldu.`,
                    Hucreler: hucreler
                })
            })
                .then(res => res.json())
                .then(res => {
                    if (res.status === "ok") {
                        Swal.fire("Kaydedildi", "Tablo başarıyla kaydedildi.", "success");
                    } else if (res.status === "already_exists") {
                        Swal.fire("Zaten Var", "Bu ürün için daha önce tablo tanımlanmış.", "warning");
                    } else {
                        Swal.fire("Hata", "Bilinmeyen bir hata oluştu.", "error");
                    }
                })
                .catch(err => {
                    console.error(err);
                    Swal.fire("Sunucu Hatası", "Tablo kaydedilemedi.", "error");
                });
        });
    }


       function urunSil() {
        const urunSelect = document.getElementById("urunSec");
        const urunId = urunSelect.value;

            if (!urunId) return toastr.success("Lütfen silmek için bir ürün seçin.");
    
        if (!confirm("Bu ürünü silmek istediğinize emin misiniz?")) return;

        fetch(`/${seoUrl}/api/urun/sil/${urunId}`, { method: 'DELETE' })
            .then(res => res.json())
            .then(data => {
                if (data.status === "ok") {
                    toastr.success("✅ Ürün silindi.");

                    // Seçilen ürünü dropdown'dan kaldır
                    const optionToRemove = urunSelect.querySelector(`option[value="${urunId}"]`);
                    if (optionToRemove) optionToRemove.remove();

                    // Ürün kalmadıysa butonları pasifleştir
                    if (urunSelect.options.length === 0) {
                        butonlariPasifEt();
                        toastr.warning("❗ Tüm ürünler silindi. Tablo oluşturmak için yeni ürün ekleyin.");
                    } else {
                        // Yeni seçilecek ürün için tabloyu yeniden başlat
                        urunSelect.selectedIndex = 0;
                        if (hot) hot.destroy();
                        metaDataMap = {};
                        initHandsontable();
                    }
                } else {
                    toastr.error("❌ Ürün silinemedi.");

                        
                }
            });
    }


    function urunEkle() {
        const ad = document.getElementById("yeniUrunAdi").value.trim();
        const aciklama = document.getElementById("yeniUrunAciklama").value;
            if (!ad) return toastr.success("Ürün adı boş olamaz.");
  

        fetch(`/${seoUrl}/api/urun/ekle`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ Ad: ad, Aciklama: aciklama })
        })
            .then(res => res.json())
                .then(data => {
        if (data.id) {
            const opt = new Option(data.ad, data.id);
            document.getElementById("urunSec").appendChild(opt);
            toastr.success("✅ Ürün eklendi: " + urunAdi);

            document.getElementById("yeniUrunAdi").value = "";
            document.getElementById("yeniUrunAciklama").value = "";
            $('#urunEkleModal').modal('hide');
            butonlariAktifEt(); // ✅ Ürün eklendikten sonra butonları aktif et
        } else {
            toastr.error("❌ Ürün eklenemedi. Aynı isimde olabilir.");

        }
    });
    }

    function degiskenleriGetir() {
        fetch(`/${seoUrl}/api/firma-degiskenleri`)
            .then(res => res.json())
            .then(data => {
                const container = document.getElementById("degiskenCheckboxList");
                container.innerHTML = "";

                data.forEach((degisken, index) => {
                    const id = `degisken${index}`;
                    container.innerHTML += `
                        <div class="form-check col-md-4">
                            <input class="form-check-input" type="checkbox" id="${id}" value="${degisken.ad}" onchange="degiskeniTabloyaEkle(this)">
                            <label class="form-check-label" for="${id}" data-deger="${degisken.deger}">${degisken.ad}</label>
                        </div>`;
                });
            });
    }

    function degiskeniTabloyaEkle(checkbox) {
        if (!checkbox.checked) return;

        const degiskenAdi = checkbox.value;
        const label = document.querySelector(`label[for="${checkbox.id}"]`);
        const degiskenDegeri = label?.getAttribute('data-deger') ?? '';

        const hotData = hot.getData();
        const flat = hotData.flat().map(x => String(x).trim());
        if (flat.includes(degiskenAdi)) {
          
            toastr.success("Bu değişken zaten tabloda var.");

            checkbox.checked = false;
            return;
        }

        let rowIndex = hotData.findIndex(row => row[0] === null || row[0] === '');
        if (rowIndex === -1) {
            hot.alter('insertRow');
            rowIndex = hot.countRows() - 1;
        }

        hot.setDataAtCell(rowIndex, 0, degiskenAdi);
        hot.setDataAtCell(rowIndex, 1, degiskenDegeri);

        const cell = "A" + (rowIndex + 1);
        metaDataMap[cell] = metaDataMap[cell] || {};
        metaDataMap[cell].GozuksunMu = true;
        metaDataMap[cell].GirdimiYapabilir = false;

        hot.render();
    }
</script>






